name: Backend CD

on:
  workflow_run:
    workflows: ["Backend CI/CD"]
    types:
      - completed
    branches: [ main ]

jobs:
  deploy:
    name: Deploy Backend to Render
    # Only run if CI workflow succeeded and it's on the main branch
    if: |
      github.event.workflow_run.conclusion == 'success' && 
      github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./teleheal-backend/gradlew

      - name: Build application
        run: |
          cd teleheal-backend
          ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Create a minimal Dockerfile for the runtime image
      - name: Create production Dockerfile
        run: |
          echo "FROM openjdk:24-jdk-slim" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY teleheal-backend/build/libs/teleheal-backend-0.0.1-SNAPSHOT.jar app.jar" >> Dockerfile    
          echo "EXPOSE 8080" >> Dockerfile
          echo 'CMD ["java", "-jar", "app.jar"]' >> Dockerfile    

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/teleheal-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/teleheal-backend:${{ github.sha }}

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X GET "https://api.render.com/deploy/$RENDER_SERVICE_ID?key=$RENDER_API_KEY"
